{"version":3,"sources":["api.ts","App.tsx","useLocalStorage.ts","index.tsx"],"names":["getFromServer","valueInput","a","fetch","method","body","JSON","stringify","apiKey","modelName","calledMethod","methodProperties","Documents","DocumentNumber","response","json","result","data","App","useState","setValueInput","currentTT","setCurrentTT","descriptionIsVisible","setDescriptionIsVisible","key","initialValue","getValue","storage","localStorage","getItem","parse","console","log","value","setValue","useEffect","setItem","useLocalStorage","listOfTT","setListOfTT","State","val","TT","getTTFromServer","handlerTTinList","event","preventDefault","textContent","currentTarget","className","type","onChange","target","eventInput","onClick","tt","some","item","Number","Status","WarehouseSender","WarehouseRecipient","length","map","i","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAEaA,EAAa,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACJC,MAHT,uCAGwB,CACpCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,OAAQ,mCACRC,UAAW,mBACXC,aAAc,qBACdC,iBAAkB,CAChBC,UAAW,CACT,CACEC,eAAe,GAAD,OAAKZ,UAVF,cACrBa,EADqB,gBAgBNA,EAASC,OAhBH,cAgBrBC,EAhBqB,yBAkBpBA,EAAOC,MAlBa,2CAAH,sD,eCebC,EAAgB,WAC3B,MAAoCC,mBAA0B,IAA9D,mBAAOlB,EAAP,KAAmBmB,EAAnB,KACA,EAAkCD,mBAAwB,MAA1D,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAwDH,oBAAS,GAAjE,mBAAOI,EAAP,KAA6BC,EAA7B,KAEA,ECf6B,SAAIC,EAAaC,GAE9C,IAAMC,EAAW,WACf,IAAMC,EAAUC,aAAaC,QAAQL,GAErC,OAAIG,EACKtB,KAAKyB,MAAMH,GAGbF,GAITM,QAAQC,IAAIN,KAEZ,MAA0BR,mBAAYQ,GAAtC,mBAAOO,EAAP,KAAcC,EAAd,KAMA,OAJAC,qBAAU,WACRP,aAAaQ,QAAQZ,EAAKnB,KAAKC,UAAU2B,MACxC,CAACA,IAEG,CAACA,EAAOC,GDNiBG,CAA0B,WAAY,IAAtE,mBAAOC,EAAP,KAAiBC,EAAjB,KAGAR,QAAQC,IAAIJ,aAAaY,OAUzBL,qBAAU,YACa,uCAAG,WAAOM,GAAP,eAAAxC,EAAA,sEACLF,EAAc0C,GADT,OAChBC,EADgB,OAGtBrB,EAAaqB,EAAG,IAHM,2CAAH,sDAMrBC,EAAiB3C,KAChB,CAACA,IAEJ,IAAM4C,EAA8D,SAACC,GACnEA,EAAMC,iBACN,IAAQC,EAAgBF,EAAMG,cAAtBD,YAEJA,GACF5B,GAAe4B,GAGjBxB,GAAwB,IAQ1B,OACE,sBAAK0B,UAAU,MAAf,UACE,gCACE,uBACEC,KAAK,SACLjB,MAAOjC,EACPmD,SAAU,SAACN,GAAD,OAXC,SAACA,GAClB1B,EAAc0B,EAAMO,OAAOnB,OAC3BV,GAAwB,GASG8B,CAAWR,MAElC,wBAAQK,KAAK,SAASI,QAAS,kBAAMlC,IA1CtBmC,EA0C+CnC,EAzC7DkB,EAASkB,MAAK,SAACC,GAAD,OAAiBA,EAAKC,SAAWH,EAAGG,WACrDnB,EAAY,GAAD,mBAAKD,GAAL,CAAeiB,UAG5BhC,GAAwB,IALN,IAACgC,GA0Cf,sBAGCjC,GAAwBF,GACvB,sBAAK6B,UAAU,cAAf,UACE,qBAAKA,UAAU,SAAf,0GAA6C7B,EAAUuC,UACvD,qBAAKV,UAAU,SAAf,uFAAyC7B,EAAUwC,mBACnD,qBAAKX,UAAU,YAAf,qEAAyC7B,EAAUyC,4BAIzD,2CAEGvB,EAASwB,OAAS,GACjB,gCACE,oBAAIb,UAAU,UAAd,SACGX,EAASyB,KAAI,SAACrB,EAAWsB,GAAZ,OACZ,oBACEf,UAAU,UADZ,SAIE,mBACEgB,KAAK,IACLhB,UAAU,UACVK,QAASV,EAHX,SAKGF,EAAGgB,UAPDM,QAYX,wBAAQd,KAAK,SAASI,QAAS,kBAAMf,EAAY,KAAjD,6BE/FZ2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7a60f75e.chunk.js","sourcesContent":["const API_URL = 'https://api.novaposhta.ua/v2.0/json/';\n\nexport const getFromServer = async (valueInput:number) => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    body: JSON.stringify({\n      apiKey: 'f8d845dad31ff4d74da31ed7628e7a54',\n      modelName: 'TrackingDocument',\n      calledMethod: 'getStatusDocuments',\n      methodProperties: {\n        Documents: [\n          {\n            DocumentNumber: `${valueInput}`,\n          },\n        ],\n      },\n    }),\n  });\n  const result = await response.json();\n\n  return result.data;\n};\n","import React, {\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\n\r\nimport { getFromServer } from './api';\r\nimport { useLocalStorage } from './useLocalStorage';\r\n\r\nimport './App.scss';\r\n\r\ntype typeTT = {\r\n  Number: number;\r\n  Status: string;\r\n  WarehouseRecipient: string;\r\n  WarehouseSender: string;\r\n};\r\n\r\nexport const App: React.FC = () => {\r\n  const [valueInput, setValueInput] = useState<string | number>('');\r\n  const [currentTT, setCurrentTT] = useState<typeTT | null>(null);\r\n  const [descriptionIsVisible, setDescriptionIsVisible] = useState(false);\r\n\r\n  const [listOfTT, setListOfTT] = useLocalStorage<typeTT[]>('listOfTT', []);\r\n\r\n  // eslint-disable-next-line no-console\r\n  console.log(localStorage.State);\r\n\r\n  const addToTTList = (tt:typeTT) => {\r\n    if (!listOfTT.some((item:typeTT) => item.Number === tt.Number)) {\r\n      setListOfTT([...listOfTT, tt]);\r\n    }\r\n\r\n    setDescriptionIsVisible(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getTTFromServer = async (val: number) => {\r\n      const TT = await getFromServer(val);\r\n\r\n      setCurrentTT(TT[0]);\r\n    };\r\n\r\n    getTTFromServer(+valueInput);\r\n  }, [valueInput]);\r\n\r\n  const handlerTTinList: React.MouseEventHandler<HTMLAnchorElement> = (event) => {\r\n    event.preventDefault();\r\n    const { textContent } = event.currentTarget;\r\n\r\n    if (textContent) {\r\n      setValueInput(+textContent);\r\n    }\r\n\r\n    setDescriptionIsVisible(true);\r\n  };\r\n\r\n  const eventInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValueInput(event.target.value);\r\n    setDescriptionIsVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div>\r\n        <input\r\n          type=\"number\"\r\n          value={valueInput}\r\n          onChange={(event) => eventInput(event)}\r\n        />\r\n        <button type=\"button\" onClick={() => currentTT && addToTTList(currentTT)}>\r\n          Get info\r\n        </button>\r\n        {descriptionIsVisible && currentTT && (\r\n          <div className=\"description\">\r\n            <div className=\"status\">{`Статус доставки: ${currentTT.Status}`}</div>\r\n            <div className=\"sender\">{`Відправлено: ${currentTT.WarehouseSender}`}</div>\r\n            <div className=\"recipient\">{`Отримано: ${currentTT.WarehouseRecipient}`}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        History:\r\n        {listOfTT.length > 0 && (\r\n          <div>\r\n            <ul className=\"TT-list\">\r\n              {listOfTT.map((TT:typeTT, i:number) => (\r\n                <li\r\n                  className=\"TT-item\"\r\n                  key={i}\r\n                >\r\n                  <a\r\n                    href=\"/\"\r\n                    className=\"TT-link\"\r\n                    onClick={handlerTTinList}\r\n                  >\r\n                    {TT.Number}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <button type=\"button\" onClick={() => setListOfTT([])}>\r\n              Clean\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T):\n[T, Dispatch<SetStateAction<T>>] => {\n  const getValue = ():T => {\n    const storage = localStorage.getItem(key);\n\n    if (storage) {\n      return JSON.parse(storage);\n    }\n\n    return initialValue;\n  };\n\n  // eslint-disable-next-line no-console\n  console.log(getValue());\n\n  const [value, setValue] = useState<T>(getValue);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}